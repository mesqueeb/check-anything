import { test, expect } from 'vitest'
import { isUrl } from '../src/index'

// These URLs are valid
test('http://foo.com/blah_blah', () => expect(isUrl('http://foo.com/blah_blah')).toEqual(true))
test('http://foo.com/blah_blah/', () => expect(isUrl('http://foo.com/blah_blah/')).toEqual(true))
test('http://foo.com/blah_blah_(wikipedia)', () => expect(isUrl('http://foo.com/blah_blah_(wikipedia)')).toEqual(true))
test('http://foo.com/blah_blah_(wikipedia)_(again)', () => expect(isUrl('http://foo.com/blah_blah_(wikipedia)_(again)')).toEqual(true))
test('http://www.example.com/wpstyle/?p=364', () => expect(isUrl('http://www.example.com/wpstyle/?p=364')).toEqual(true))
test('https://www.example.com/foo/?bar=baz&inga=42&quux', () => expect(isUrl('https://www.example.com/foo/?bar=baz&inga=42&quux')).toEqual(true))
test('http://userid:password@example.com:8080', () => expect(isUrl('http://userid:password@example.com:8080')).toEqual(true))
test('http://userid:password@example.com:8080/', () => expect(isUrl('http://userid:password@example.com:8080/')).toEqual(true))
test('http://userid@example.com', () => expect(isUrl('http://userid@example.com')).toEqual(true))
test('http://userid@example.com/', () => expect(isUrl('http://userid@example.com/')).toEqual(true))
test('http://userid@example.com:8080', () => expect(isUrl('http://userid@example.com:8080')).toEqual(true))
test('http://userid@example.com:8080/', () => expect(isUrl('http://userid@example.com:8080/')).toEqual(true))
test('http://userid:password@example.com', () => expect(isUrl('http://userid:password@example.com')).toEqual(true))
test('http://userid:password@example.com/', () => expect(isUrl('http://userid:password@example.com/')).toEqual(true))
test('http://142.42.1.1/', () => expect(isUrl('http://142.42.1.1/')).toEqual(true))
test('http://142.42.1.1:8080/', () => expect(isUrl('http://142.42.1.1:8080/')).toEqual(true))
test('http://foo.com/blah_(wikipedia)#cite-1', () => expect(isUrl('http://foo.com/blah_(wikipedia)#cite-1')).toEqual(true))
test('http://foo.com/blah_(wikipedia)_blah#cite-1', () => expect(isUrl('http://foo.com/blah_(wikipedia)_blah#cite-1')).toEqual(true))
test('http://foo.com/unicode_(✪)_in_parens', () => expect(isUrl('http://foo.com/unicode_(✪)_in_parens')).toEqual(true))
test('http://foo.com/(something)?after=parens', () => expect(isUrl('http://foo.com/(something)?after=parens')).toEqual(true))
test('http://code.google.com/events/#&product=browser', () => expect(isUrl('http://code.google.com/events/#&product=browser')).toEqual(true))
test('http://j.mp', () => expect(isUrl('http://j.mp')).toEqual(true))
test('ftp://foo.bar/baz', () => expect(isUrl('ftp://foo.bar/baz')).toEqual(true))
test('http://foo.bar/?q=Test%20URL-encoded%20stuff', () => expect(isUrl('http://foo.bar/?q=Test%20URL-encoded%20stuff')).toEqual(true))
test(`http://-.~_!$&'()*+,;=:%40:80%2f::::::@example.com`, () => expect(isUrl(`http://-.~_!$&'()*+,;=:%40:80%2f::::::@example.com`)).toEqual(true))
test('http://1337.net', () => expect(isUrl('http://1337.net')).toEqual(true))
test('http://a.b-c.de', () => expect(isUrl('http://a.b-c.de')).toEqual(true))
test('http://223.255.255.254', () => expect(isUrl('http://223.255.255.254')).toEqual(true))
test('https://foo_bar.example.com/', () => expect(isUrl('https://foo_bar.example.com/')).toEqual(true))
test('http://google.com//', () => expect(isUrl('http://google.com//')).toEqual(true))
test('http://google.com/asd//', () => expect(isUrl('http://google.com/asd//')).toEqual(true))

// Special characters URL are also valid
test('https://foo.com/ギットハブ', () => expect(isUrl('https://foo.com/ギットハブ')).toEqual(true))
test('https://ギットハブ.com', () => expect(isUrl('https://ギットハブ.com')).toEqual(true))
test('http://✪df.ws/123', () => expect(isUrl('http://✪df.ws/123')).toEqual(true))
test('http://➡.ws/䨹', () => expect(isUrl('http://➡.ws/䨹')).toEqual(true))
test('http://⌘.ws', () => expect(isUrl('http://⌘.ws')).toEqual(true))
test('http://⌘.ws/', () => expect(isUrl('http://⌘.ws/')).toEqual(true))
test('http://☺.damowmow.com/', () => expect(isUrl('http://☺.damowmow.com/')).toEqual(true))
test('http://مثال.إختبار', () => expect(isUrl('http://مثال.إختبار')).toEqual(true))
test('http://例子.测试', () => expect(isUrl('http://例子.测试')).toEqual(true))
test('http://उदाहरण.परीक्षा', () => expect(isUrl('http://उदाहरण.परीक्षा')).toEqual(true))

// These URLs currently pass, but we're not sure if they're valid
test('http://www.google.com/"asdf"', () => expect(isUrl('http://www.google.com/"asdf"')).toEqual(true))
test('http://a.b--c.de/', () => expect(isUrl('http://a.b--c.de/')).toEqual(true))
test('http://www.foo.bar./', () => expect(isUrl('http://www.foo.bar./')).toEqual(true))

// These URLs should fail
test('mailto:me@github.com', () => expect(isUrl('mailto:me@github.com')).toEqual(false))
test('http://', () => expect(isUrl('http://')).toEqual(false))
test('http://.', () => expect(isUrl('http://.')).toEqual(false))
test('http://..', () => expect(isUrl('http://..')).toEqual(false))
test('http://../', () => expect(isUrl('http://../')).toEqual(false))
test('http://?', () => expect(isUrl('http://?')).toEqual(false))
test('http://??', () => expect(isUrl('http://??')).toEqual(false))
test('http://??/', () => expect(isUrl('http://??/')).toEqual(false))
test('http://#', () => expect(isUrl('http://#')).toEqual(false))
test('http://##', () => expect(isUrl('http://##')).toEqual(false))
test('http://##/', () => expect(isUrl('http://##/')).toEqual(false))
test('http://foo.bar?q=Spaces should be encoded', () => expect(isUrl('http://foo.bar?q=Spaces should be encoded')).toEqual(false))
test('//', () => expect(isUrl('//')).toEqual(false))
test('//a', () => expect(isUrl('//a')).toEqual(false))
test('///a', () => expect(isUrl('///a')).toEqual(false))
test('///', () => expect(isUrl('///')).toEqual(false))
test('http:///a', () => expect(isUrl('http:///a')).toEqual(false))
test('foo.com', () => expect(isUrl('foo.com')).toEqual(false))
test('rdar://1234', () => expect(isUrl('rdar://1234')).toEqual(false))
test('h://test', () => expect(isUrl('h://test')).toEqual(false))
test('http:// shouldfail.com', () => expect(isUrl('http:// shouldfail.com')).toEqual(false))
test(':// should fail', () => expect(isUrl(':// should fail')).toEqual(false))
test('http://foo.bar/foo(bar)baz quux', () => expect(isUrl('http://foo.bar/foo(bar)baz quux')).toEqual(false))
test('ftps://foo.bar/', () => expect(isUrl('ftps://foo.bar/')).toEqual(false))
test('http://-error-.invalid/', () => expect(isUrl('http://-error-.invalid/')).toEqual(false))
test('http://-a.b.co', () => expect(isUrl('http://-a.b.co')).toEqual(false))
test('http://a.b-.co', () => expect(isUrl('http://a.b-.co')).toEqual(false))
test('http://0.0.0', () => expect(isUrl('http://0.0.0')).toEqual(false))
test('http://10.1.1', () => expect(isUrl('http://10.1.1')).toEqual(false))
test('http://10.1.1.255', () => expect(isUrl('http://10.1.1.255')).toEqual(false))
test('http://224.1.1.1', () => expect(isUrl('http://224.1.1.1')).toEqual(false))
test('http://1.1.1.1.1', () => expect(isUrl('http://1.1.1.1.1')).toEqual(false))
test('http://123.123.123', () => expect(isUrl('http://123.123.123')).toEqual(false))
test('http://3628126748', () => expect(isUrl('http://3628126748')).toEqual(false))
test('http://.www.foo.bar/', () => expect(isUrl('http://.www.foo.bar/')).toEqual(false))
test('http://.www.foo.bar./', () => expect(isUrl('http://.www.foo.bar./')).toEqual(false))
test('http://10.1.1.1', () => expect(isUrl('http://10.1.1.1')).toEqual(false))
test('http://10.1.1.254', () => expect(isUrl('http://10.1.1.254')).toEqual(false))
